# Use newer Node.js version to address vulnerabilities
FROM node:20-alpine AS node-builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Main PHP image
FROM php:8.2-fpm-alpine

# Install system dependencies
RUN apk add --no-cache \
    mysql-client \
    nodejs \
    npm \
    curl \
    zip \
    unzip \
    git \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) pdo_mysql mbstring exif pcntl bcmath gd

# Install Composer
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Create application user
RUN addgroup -g 1000 www && \
    adduser -u 1000 -G www -s /bin/sh -D www

# Set working directory
WORKDIR /var/www

# Copy composer files first for better caching
COPY --chown=www:www composer.json composer.lock ./

# Install PHP dependencies
USER www
RUN composer install --no-dev --no-scripts --no-autoloader --optimize-autoloader

# Create required directories
USER root
RUN mkdir -p \
    /var/www/storage/logs \
    /var/www/storage/framework/cache \
    /var/www/storage/framework/sessions \
    /var/www/storage/framework/views \
    /var/www/bootstrap/cache \
    && chmod -R 775 /var/www/storage /var/www/bootstrap/cache \
    && chown -R www:www /var/www

# Copy application code first (this will overwrite any existing node_modules)
COPY --chown=www:www . .

# Clean any existing node_modules to prevent conflicts
RUN rm -rf /var/www/node_modules

# Install Node.js dependencies fresh
USER www
COPY --chown=www:www package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Build frontend assets if build script exists
RUN if grep -q '"build"' package.json; then npm run build; else echo "No build script found"; fi

# Generate optimized autoloader
RUN composer dump-autoload --optimize

# Create entrypoint script for runtime optimization
USER root
RUN cat > /var/www/docker-entrypoint.sh << 'EOF'
#!/bin/sh
set -e

echo "Optimizing Laravel caches..."
php artisan config:cache
php artisan route:cache  
php artisan view:cache

echo "Starting PHP-FPM..."
exec php-fpm
EOF

RUN chmod +x /var/www/docker-entrypoint.sh && \
    chown www:www /var/www/docker-entrypoint.sh

USER www

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD php artisan tinker --execute="echo 'OK';" || exit 1

EXPOSE 9000

CMD ["/var/www/docker-entrypoint.sh"]